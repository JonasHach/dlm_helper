# Patch generated by Pyment v0.3.3

--- a/dlm_helper.py
+++ b/dlm_helper.py
@@ -29,6 +29,22 @@
             variable_seasonal: List[bool] = [False],
             autoregressive: int = 1, irregular: bool = True
            ):
+    """
+
+    :param timeseries: TimeSeries: 
+    :param name: str:  (Default value = None)
+    :param level: bool:  (Default value = True)
+    :param variable_level: bool:  (Default value = False)
+    :param trend: bool:  (Default value = True)
+    :param variable_trend: bool:  (Default value = True)
+    :param seasonal: bool:  (Default value = True)
+    :param seasonal_period: List[float]:  (Default value = [365])
+    :param seasonal_harmonics: List[int]:  (Default value = [4])
+    :param variable_seasonal: List[bool]:  (Default value = [False])
+    :param autoregressive: int:  (Default value = 1)
+    :param irregular: bool:  (Default value = True)
+
+    """
     
     if seasonal:
         fs = []
@@ -53,6 +69,12 @@
     return DLMResult.create(name,timeseries, result)
 
 def _create_folds(data,n=10):
+    """
+
+    :param data: 
+    :param n:  (Default value = 10)
+
+    """
     idxs = np.floor(np.linspace(0, data.size-1,n+1,endpoint=True)
                    ).astype(np.int_)
     out = []
@@ -81,6 +103,29 @@
     scores: dict = None,
     folds: int = 5
     ) -> Tuple[DLMResultList, dict]:
+    """
+
+    :param timeseries: TimeSeries: 
+    :param name: str: 
+    :param level: List[bool]:  (Default value = [True])
+    :param variable_level: List[bool]:  (Default value = [False])
+    :param trend: List[bool]:  (Default value = [True])
+    :param variable_trend: List[bool]:  (Default value = [True])
+    :param seasonal: List[bool]:  (Default value = [True])
+    :param seasonal_period: List[List[float]]:  (Default value = [[365]])
+    :param seasonal_harmonics: List[List[List[int]]]:  (Default value = [[[1)
+    :param 2: 
+    :param 3: 
+    :param 4]]]: 
+    :param variable_seasonal: List[List[List[bool]]]:  (Default value = [[[True)
+    :param False]]]: 
+    :param autoregressive: List[int]:  (Default value = [1])
+    :param irregular: List[bool]:  (Default value = [False)
+    :param True]: 
+    :param scores: dict:  (Default value = None)
+    :param folds: int:  (Default value = 5)
+
+    """
     
     data = _create_folds(timeseries.data, n = folds)
     
@@ -128,15 +173,30 @@
     irregular: List[bool] = [False, True],
     scores: dict = None
 ) -> DLMResultList:
-    """
-    Fits an ensemble of Dynamic Linear Models (DLMs) to a time series.
+    """Fits an ensemble of Dynamic Linear Models (DLMs) to a time series.
 
     :param level: level (List)
-    :param variable_level: seasonal_harmonics (List[int]): 
-
-    :param scores: (dict[float], optional) a dictionary in form 
+    :param variable_level: seasonal_harmonics (List[int]):
+    :param scores: dict[float], optional) a dictionary in form
     {name_string: score}, where name_string is is given by name_from_spec
-
+    :param timeseries: TimeSeries: 
+    :param name: str: 
+    :param level: List[bool]:  (Default value = [True])
+    :param variable_level: List[bool]:  (Default value = [False])
+    :param trend: List[bool]:  (Default value = [True])
+    :param variable_trend: List[bool]:  (Default value = [True])
+    :param seasonal: List[bool]:  (Default value = [True])
+    :param seasonal_period: List[List[float]]:  (Default value = [[365]])
+    :param seasonal_harmonics: List[List[List[int]]]:  (Default value = [[[1)
+    :param 2: 
+    :param 3: 
+    :param 4]]]: 
+    :param variable_seasonal: List[List[List[bool]]]:  (Default value = [[[True)
+    :param False]]]: 
+    :param autoregressive: List[int]:  (Default value = [1])
+    :param irregular: List[bool]:  (Default value = [False)
+    :param True]: 
+    :param scores: dict:  (Default value = None)
     :returns: DLMResultList: An object containing multiple DLMResult objects
 
     """
@@ -214,22 +274,21 @@
 ################ OLD
 def model_selection_bias_AMI(results: DLMResultList, percentile: int = 25, 
                          years: ArrayLike = None):
-    """
-    Calculate the model selection bias for Dynamic Linear Models (DLM) results.
-
+    """Calculate the model selection bias for Dynamic Linear Models (DLM) results.
+    
     This function computes the model selection bias for AMIs for the given DLMResultList. The bias is calculated by
-    computing the weighted variance between the average fit AMI and each individual fit AMI for each year. 
-    The bias is calculated using all models whose aggregate metric is within the specified percentile. 
-
-    Parameters:
-        results (DLMResultList): A DLMResultList object containing a list of DLM results.
-        percentile (int, optional): The percentile value used to select data points for computing the model selection bias.
-                                   Defaults to 25.
-        years (ArrayLike, optional): An array-like object containing the years for which to calculate the model selection bias.
-                                     If None, the years will be set to [2018, 2019, 2020, 2021, 2022]. Defaults to None.
-
-    Returns:
-        np.ndarray: An array containing the model selection bias for each year specified in the 
+    computing the weighted variance between the average fit AMI and each individual fit AMI for each year.
+    The bias is calculated using all models whose aggregate metric is within the specified percentile.
+
+    :param results: DLMResultList
+    :param percentile: int
+    :param Defaults: to 25
+    :param years: ArrayLike
+    :param If: None
+    :param results: DLMResultList: 
+    :param percentile: int:  (Default value = 25)
+    :param years: ArrayLike:  (Default value = None)
+    :returns: np.ndarray: An array containing the model selection bias for each year specified in the
         'years' array.
 
     """
@@ -267,20 +326,18 @@
 
 
 def model_selection_bias_trend(results: DLMResultList, percentile: int = 25):
-    """
-    Calculate the model selection bias for Dynamic Linear Models (DLM) results.
-
+    """Calculate the model selection bias for Dynamic Linear Models (DLM) results.
+    
     This function computes the model selection bias for growth rates for the given DLMResultsList. The bias is calculated by
-    computing the weighted variance between the average fit trend (growth rate) and each individual fit trend. 
-    The bias is calculated using all models whose aggregate metric is within the specified percentile. 
-
-    Parameters:
-        results (DLMResultList): A DLMResultList object containing a list of DLM results.
-        percentile (int, optional): The percentile value used to select data points for computing the model selection bias.
-                                   Defaults to 25.
-
-    Returns:
-        float: model selection bias
+    computing the weighted variance between the average fit trend (growth rate) and each individual fit trend.
+    The bias is calculated using all models whose aggregate metric is within the specified percentile.
+
+    :param results: DLMResultList
+    :param percentile: int
+    :param Defaults: to 25
+    :param results: DLMResultList: 
+    :param percentile: int:  (Default value = 25)
+    :returns: float: model selection bias
 
     """
 
@@ -308,22 +365,26 @@
     return np.sqrt(np.average((trend_avg-_r.trend)**2,weights=1/np.sqrt(trend_cov_avg**2+_r.trend_cov**2),axis=0))
 
 def mean_from_date(d1: int ,m1: int ,y1: int ,d2: int ,m2: int ,y2: int , X: ArrayLike ,d: ArrayLike ) -> float:
-    """
-    Calculate the mean of the values in X that fall within a given date range.
-
-    Parameters:
-        d1 (int): Day of the month for the start date (1-31).
-        m1 (int): Month of the start date (1-12).
-        y1 (int): Year of the start date.
-        d2 (int): Day of the month for the end date (1-31).
-        m2 (int): Month of the end date (1-12).
-        y2 (int): Year of the end date.
-        X (ArrayLike): Array of values to calculate the mean from.
-        d (ArrayLike): Array of date values (in days since 1970-01-01) 
-                    corresponding to the values in X.
-
-    Returns:
-        float: Mean of the values in X that fall within the specified date range.
+    """Calculate the mean of the values in X that fall within a given date range.
+
+    :param d1: int
+    :param m1: int
+    :param y1: int
+    :param d2: int
+    :param m2: int
+    :param y2: int
+    :param X: ArrayLike
+    :param d: ArrayLike
+    :param corresponding: to the values in X
+    :param d1: int: 
+    :param m1: int: 
+    :param y1: int: 
+    :param d2: int: 
+    :param m2: int: 
+    :param y2: int: 
+    :param X: ArrayLike: 
+    :param d: ArrayLike: 
+    :returns: float: Mean of the values in X that fall within the specified date range.
 
     """
     
@@ -333,21 +394,25 @@
     return np.nanmean(X[(d>=date_min) & (d<=date_max)])
 
 def vmr_increase(d1: int, m1: int, y1: int, d2: int, m2: int, y2: int, L: ArrayLike, d: ArrayLike) -> float:
-    """
-    Calculate the increase in level between two days.
-
-    Parameters:
-        d1 (int): Day of the month for the start date (1-31).
-        m1 (int): Month of the start date (1-12).
-        y1 (int): Year of the start date.
-        d2 (int): Day of the month for the end date (1-31).
-        m2 (int): Month of the end date (1-12).
-        y2 (int): Year of the end date.
-        L (ArrayLike): Array of level values corresponding to the dates in 'd'.
-        d (ArrayLike): Array of date values (in days since 1970-01-01) corresponding to the values in 'L'.
-
-    Returns:
-        float: Increase in level between the start and end dates.
+    """Calculate the increase in level between two days.
+
+    :param d1: int
+    :param m1: int
+    :param y1: int
+    :param d2: int
+    :param m2: int
+    :param y2: int
+    :param L: ArrayLike
+    :param d: ArrayLike
+    :param d1: int: 
+    :param m1: int: 
+    :param y1: int: 
+    :param d2: int: 
+    :param m2: int: 
+    :param y2: int: 
+    :param L: ArrayLike: 
+    :param d: ArrayLike: 
+    :returns: float: Increase in level between the start and end dates.
 
     """
     L = np.asarray(L)
@@ -372,18 +437,23 @@
     """"
     Calculate the standard deviation to the increase in level between two days.
 
-     Parameters:
-        d1 (int): Day of the month for the start date (1-31).
-        m1 (int): Month of the start date (1-12).
-        y1 (int): Year of the start date.
-        d2 (int): Day of the month for the end date (1-31).
-        m2 (int): Month of the end date (1-12).
-        y2 (int): Year of the end date.
-        cL (ArrayLike): Array of level covariance values corresponding to the dates in 'd'.
-        d (ArrayLike): Array of date values (in days since 1970-01-01) corresponding to the values in 'L'.
-
-    Returns:
-        float: Standard deviation corresponding to increase in level between the start and end dates.
+    :param d1: int
+    :param m1: int
+    :param y1: int
+    :param d2: int
+    :param m2: int
+    :param y2: int
+    :param cL: ArrayLike
+    :param d: ArrayLike
+    :param d1: int: 
+    :param m1: int: 
+    :param y1: int: 
+    :param d2: int: 
+    :param m2: int: 
+    :param y2: int: 
+    :param cL: ArrayLike: 
+    :param d: ArrayLike: 
+    :returns: float: Standard deviation corresponding to increase in level between the start and end dates.
 
     """
     cL = np.asarray(cL)
@@ -405,13 +475,13 @@
     """Calculate annual increase  and standard deviation in volume mixing ratio
         for a given DLMResult object.
 
-    Parameters:
-        year (int): the year for which the increase is calculated.
-        data (DLMResult): a DLMResult object gained from read_dlm_results.
-
-    Returns:
-        Tuple[float, float]: a tuple containing the annual increase and 
+    :param year: int
+    :param data: DLMResult
+    :param year: int: 
+    :param data: DLMResult: 
+    :returns: Tuple[float, float]: a tuple containing the annual increase and
         standard deviation.
+
     """
     inc = -999
     inc_std = -999
@@ -461,17 +531,21 @@
                     year_range: tuple = (2018, 2023)) -> Tuple[np.ndarray, np.ndarray]:
     """Calculate monthly volume mixing ration (vmr) from daily vmr data for a given time range
 
-    Parameters:
-        vmr (array_like): an array of vmr values.
-        date_min (int, datetime.datetime): the minimum date in days since 01.01.1970
-            or datetime object for which to calculate vmr.
-        date_max (int, datetime.datetime): the maximum date in days since 01.01.1970 
-            or datetime object for which to calculate vmr.
-        year_range (Tuple[int], optional): a list containing the start and end years
-            of the range of years to calculate vmr for. Defaults to (2018, 2022).
-
-    Returns:
-        Tuple[numpy.ndarray, numpy.ndarray]: a tuple containing arrays of dates and vmr values.
+    :param vmr: array_like
+    :param date_min: int
+    :param or: datetime object for which to calculate vmr
+    :param date_max: int
+    :param or: datetime object for which to calculate vmr
+    :param year_range: Tuple
+    :param of: the range of years to calculate vmr for
+    :param vmr: ArrayLike: 
+    :param date_min: Union[int: 
+    :param datetime.datetime]: 
+    :param date_max: Union[int: 
+    :param year_range: tuple:  (Default value = (2018)
+    :param 2023): 
+    :returns: Tuple[numpy.ndarray, numpy.ndarray]: a tuple containing arrays of dates and vmr values.
+
     """
     
     vmr = np.asarray(vmr)
